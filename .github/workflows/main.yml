name: CI Build and Deploy

on: push

jobs:
  lint:
    runs-on: ubuntu-20.04
    strategy:
      matrix:
        python-version: [3.7, 3.8, 3.9]

    steps:
    - uses: actions/checkout@v2
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v2
      with:
        python-version: ${{ matrix.python-version }}
    - name: Run Linting
      run: |
        python setup.py lint

  yaml_lint:
    runs-on: ubuntu-20.04
    strategy:
      matrix:
        python-version: [3.8]
    steps:
    - uses: actions/checkout@v2
    - name: Run Linting
      run: |
        pip install yamllint
        yamllint -d relaxed .

  typecheck:
    runs-on: ubuntu-20.04
    strategy:
      matrix:
        python-version: [3.7, 3.8, 3.9]

    steps:
      - uses: actions/checkout@v2
      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v2
        with:
          python-version: ${{ matrix.python-version }}
      - name: Run Type Checking
        run: |
          pip install mypy
          python -m mypy --ignore-missing-imports -p takeoff

  test:
    runs-on: ubuntu-20.04
    needs: [lint, typecheck]
    strategy:
      matrix:
        python-version: [3.7, 3.8, 3.9]

    steps:
      - uses: actions/checkout@v2
      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v2
        with:
          python-version: ${{ matrix.python-version }}
      - name: Run tests
        run: |
          pip install wheel
          pip install .[test]
          python setup.py test

  build:
    runs-on: ubuntu-20.04
    needs: [test]
    steps:
      - uses: actions/checkout@v2
      - name: Build the image
        run: |
          docker build -t takeoff:danieldev -f Dockerfile .
      - name: Save built image
        run: |
          mkdir -p path/to/artifacts
          docker save takeoff:danieldev > path/to/artifacts/docker-image.tar
          version=$(docker run --env-file .env -v `echo $PWD`:/src takeoff:latest get_version)
          echo $version
          echo $version > path/to/artifacts/docker-tag
      - uses: actions/upload-artifact@v2
        with:
          name: docker-artifact
          path: path/to/artifacts
  deploy:
    if: startsWith(github.ref, 'refs/tags/') || startsWith(github.ref, 'refs/heads/master')
    runs-on: ubuntu-20.04
    needs: [build]
    steps:
      - name: Download Docker Image (Artifact)
        uses: actions/download-artifact@v2
        with:
          name: docker-artifact
          path: path/to/artifacts
      - name: Login to Docker Hub
        uses: docker/login-action@v1
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}
      - name: Push image to Dockerhub
        run: |
          cd path/to/artifacts
          docker load < docker-image.tar
          export TAG=$(cat docker-tag)
          docker tag $TAG schipholhub/$TAG
          docker push schipholhub/$TAG

